'use strict';

const htmlEntities = require('./htmlEntities.json');

function camelCase(str) {
  return str.replace(/[_\-]+?([a-z])/g, (m, group, idx) => idx === 0 ? group.toLowerCase() : group.toUpperCase());
}

function isObject(obj) {
  return typeof obj === 'object';
}

function map(obj, fn, target) {
  target = target || {};
  const keys = Object.keys(obj);
  for (let i = 0; i < keys.length; i += 1) {
    const key = keys[i];
    fn(key, obj[key], target);
  }
  return target;
}

function camelCaseObject(obj) {
  if (!obj) { return obj; }
  if (Array.isArray(obj)) {
    const newArray = [];
    obj.forEach((value) => {
      if (isObject(value) || Array.isArray(value)) {
        newArray.push(camelCaseObject(value));
      } else {
        newArray.push(value);
      }
    });
    return newArray;
  }
  return map(obj, (key, val, target) => {
    const newKey = camelCase(key);
    if (Array.isArray(val) || isObject(val)) {
      target[newKey] = camelCaseObject(val);
    } else {
      target[newKey] = val;
    }
  });
}

function entityToHtml(string) {
  for (const i in htmlEntities) {
    if (htmlEntities.hasOwnProperty(i)) {
      if (i !== 38) {
        string = string.replace(new RegExp(htmlEntities[i], 'g'), String.fromCharCode(i));
      }
    }
  }
  string = string.replace(new RegExp('&#(x?)(\\d+);', 'g'), (match, p1, p2) => {
    return String.fromCharCode(p1 === 'x' ? parseInt(p2, 16) : p2);
  });
  string = string.replace(new RegExp(htmlEntities[38], 'g'), String.fromCharCode(38));
  return string;
}

exports.camelCase = camelCase;
exports.isObject = isObject;
exports.camelCaseObject = camelCaseObject;
exports.entityToHtml = entityToHtml;
