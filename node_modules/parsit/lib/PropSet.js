'use strict';

var helpers = require('./helpers');

const SHORTHAND_PROPERTIES = {
  'og:image': 'og:image:url',
  'og:video': 'og:video:url',
  'og:audio': 'og:audio:url',
  'twitter:site': 'twitter:site:name',
  'twitter:creator': 'twitter:creator:name',
  'twitter:player': 'twitter:player:url'
};

const HAS_ENTITES = {
  'og:title': 1,
  'og:description': 1,
  'og:site_name': 1
};

const DUPLICATE_PROPERTIES = {
  'image:url': 1,
  'video:url': 1,
  'audio:url': 1
};

const PROPERTY_TYPES = {
  'og:image:width': Number,
  'og:image:height': Number,
  'twitter:player:width': Number,
  'twitter:player:height': Number
};

function isInt(s) { return /^[0-9]+$/.test(s); }

const PROPERTY_VALIDATE = {
  'og:image:width': isInt,
  'og:image:height': isInt
};

function PropSet(options) {
  this.options = options || {};
  if (typeof this.options.typed === 'undefined') {
    this.options.typed = true;
  }
  if (typeof this.options.camelCase === 'undefined') {
    this.options.camelCase = true;
  }
  this.data = {};
}

PropSet.prototype._checkShorthand = function (property) {
  const p = SHORTHAND_PROPERTIES[property];
  return p ? p : property;
};

PropSet.prototype._processTypedValue = function (property, value) {
  if (HAS_ENTITES[property]) {
    value = helpers.entityToHtml(value);
  }
  if (!this.options.typed) { return value; }
  var t = PROPERTY_TYPES[property];
  return t ? t(value) : value;
};

PropSet.prototype._propertyIsValid = function (property, value) {
  if (!this.options.typed) { return value; }
  var t = PROPERTY_VALIDATE[property];
  return t ? t(value) : true;
};

PropSet.prototype._toObject = function (obj, camelCase) {
  if (camelCase) {
    return helpers.camelCaseObject(obj);
  }
  return obj;
};

PropSet.prototype.set = function (property, value) {
  if (!property) { return; }
  property = this._checkShorthand(property);
  var path = property.split(':');
  var currentObj = this.data;
  if (!this._propertyIsValid(property, value)) { return; }
  for (var i = 0; i < path.length; i += 1) {
    var key = path[i];
    if (i === 0 && key === 'og') {
      continue;
    }
    if (i === path.length - 1) {
      if (helpers.isObject(currentObj)) {
        currentObj[key] = this._processTypedValue(property, value);
      }
      break;
    }
    var currentVal = currentObj[key];
    if (currentVal) {
      if (i > 0 && DUPLICATE_PROPERTIES[path[i] + ':' + path[i + 1]]) {
        var newCurrentObj = {};
        if (Array.isArray(currentVal)) {
          currentVal.push(newCurrentObj);
        } else {
          currentObj[key] = [currentVal, newCurrentObj];
        }
        currentObj = newCurrentObj;
      } else {
        currentObj = Array.isArray(currentVal)
          ? currentVal[currentVal.length - 1]
          : currentVal;
      }
    } else {
      currentObj = currentObj[key] = {};
    }
  }
};

PropSet.prototype.toObject = function (options) {
  options = options || {};
  if (typeof options.camelCase === 'undefined') {
    options.camelCase = true;
  }
  return this._toObject(this.data, options.camelCase);
};

PropSet.prototype.getOptimalImage = function (width, height, options) {
  options = options || {};
  if (typeof options.camelCase === 'undefined') {
    options.camelCase = true;
  }
  if (typeof options.preferLarger === 'undefined') {
    options.preferLarger = true;
  }
  var image = this.data.image;
  if (!image) { return null; }
  if (Array.isArray(image)) {
    if (image.length === 0) { return null; }
    var optimalImage, optimalPlusImage, optimalDelta, optimalPlusDelta;
    image.forEach((i) => {
      if (!i.width || !i.height) { return; }
      var delta = Math.pow(i.width - width, 2) + Math.pow(i.height - height, 2);
      if (options.preferLarger && i.width >= width && i.height >= height &&
        (!optimalPlusDelta || delta < optimalPlusDelta)) {
        optimalPlusDelta = delta;
        optimalPlusImage = i;
      }
      if (!optimalDelta || delta < optimalDelta) {
        optimalDelta = delta;
        optimalImage = i;
      }
    });
    if (options.preferLarger && optimalPlusImage) { return this._toObject(optimalPlusImage, options.camelCase); }
    if (optimalImage) { return this._toObject(optimalImage, options.camelCase); }
    return this._toObject(image[0], options.camelCase);
  }
  return this._toObject(image, options.camelCase);
};

exports.PropSet = PropSet;
